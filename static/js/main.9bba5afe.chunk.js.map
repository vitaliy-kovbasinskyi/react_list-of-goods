{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","state","isStarted","isReversed","sortType","this","newGoodsFromServer","goods","visibleGoods","sort","f1","f2","localeCompare","length","reverse","getReorderedGoods","className","type","onClick","setState","map","good","React","Component","ReactDOM","render","document","getElementById"],"mappings":"mPAIMA,EAAkB,CACtB,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAgDK,IAAMC,EAAb,4MACEC,MAAe,CACbC,WAAW,EACXC,YAAY,EACZC,SAAU,QAJd,4CAOE,WAAU,IAAD,OACP,EAA4CC,KAAKJ,MAAzCC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,WAAYC,EAA/B,EAA+BA,SAEzBE,EApDV,SACEC,EACAH,EACAD,GAGA,IAAIK,EAAY,YAAOD,GAKvB,OAAQH,GACN,IAAK,OACHI,EAAeA,EAAaC,MAC1B,SAACC,EAAIC,GAAL,OAAYD,EAAGE,cAAcD,MAE/B,MAEF,IAAK,SACHH,EAAeA,EAAaC,MAC1B,SAACC,EAAIC,GAAL,OAAYD,EAAGG,OAASF,EAAGE,UAYjC,OAJmB,IAAfV,GACFK,EAAaM,UAGRN,EAoBsBO,CACzBhB,EACAK,EACAD,GAGF,OACE,sBAAKa,UAAU,MAAf,WACiB,IAAdd,GACC,wBACEe,KAAK,SACLC,QAAS,WACP,EAAKC,SAAS,CACZjB,WAAW,KAJjB,mBAYDA,GACC,qCACE,wBACEe,KAAK,SACLC,QAAS,kBACP,EAAKC,SAAS,CACZf,SAAU,UAJhB,iCAWA,wBACEa,KAAK,SACLC,QAAS,kBACP,EAAKC,SAAS,CACZf,SAAU,YAJhB,4BAWA,wBACEa,KAAK,SACLC,QAAS,kBACP,EAAKC,UAAS,SAAAlB,GAAK,MAAK,CACtBE,YAAaF,EAAME,gBAJzB,qBAWA,wBACEc,KAAK,SACLC,QAAS,kBACP,EAAKC,SAAS,CACZf,SAAU,OACVD,YAAY,KALlB,mBAYA,oBAAIa,UAAU,QAAd,SACGV,EAAmBc,KAAI,SAAAC,GAAI,OAC1B,oBAEEL,UAAU,cAFZ,SAIGK,GAHIA,kBAjFvB,GAAyBC,IAAMC,WC3D/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9bba5afe.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React from 'react';\nimport './App.css';\n\nconst goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype SortType = 'none' | 'length' | 'name';\n\n// Use this function in the render method\nfunction getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  // Not to mutate the original array\n  let visibleGoods = [...goods];\n\n  // Sort and reverse goods if needed\n  // ...\n\n  switch (sortType) {\n    case 'name':\n      visibleGoods = visibleGoods.sort(\n        (f1, f2) => f1.localeCompare(f2),\n      );\n      break;\n\n    case 'length':\n      visibleGoods = visibleGoods.sort(\n        (f1, f2) => f1.length - f2.length,\n      );\n      break;\n\n    default:\n      break;\n  }\n\n  if (isReversed === true) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\n// DON'T save goods to the state\ntype State = {\n  isStarted: boolean,\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport class App extends React.Component <{}, State> {\n  state: State = {\n    isStarted: false,\n    isReversed: false,\n    sortType: 'none',\n  };\n\n  render() {\n    const { isStarted, isReversed, sortType } = this.state;\n\n    const newGoodsFromServer = getReorderedGoods(\n      goodsFromServer,\n      sortType,\n      isReversed,\n    );\n\n    return (\n      <div className=\"App\">\n        {isStarted === false && (\n          <button\n            type=\"button\"\n            onClick={() => {\n              this.setState({\n                isStarted: true,\n              });\n            }}\n          >\n            Start\n          </button>\n        )}\n\n        {isStarted && (\n          <>\n            <button\n              type=\"button\"\n              onClick={() => (\n                this.setState({\n                  sortType: 'name',\n                })\n              )}\n            >\n              Sort alphabetically\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={() => (\n                this.setState({\n                  sortType: 'length',\n                })\n              )}\n            >\n              Sort by length\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={() => (\n                this.setState(state => ({\n                  isReversed: !state.isReversed,\n                }))\n              )}\n            >\n              Reverse\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={() => (\n                this.setState({\n                  sortType: 'none',\n                  isReversed: false,\n                })\n              )}\n            >\n              Reset\n            </button>\n\n            <ul className=\"Goods\">\n              {newGoodsFromServer.map(good => (\n                <li\n                  key={good}\n                  className=\"Goods__item\"\n                >\n                  {good}\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}